<%= disclaimer() %>
package <%= ns %>.widget;

import <%= ns %>.element.*;
<% if (hasEvents()) _.forEach(events, function(event){ %>
import <%= event.ns %>.widget.event.<%= camelCase(event.name) %>Event;
import <%= event.ns %>.widget.event.<%= camelCase(event.name) %>EventHandler;
<% }); %>
import com.vaadin.polymer.PolymerWidget;
import com.vaadin.polymer.elemental.*;
import com.google.gwt.core.client.JsArray;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.core.client.JavaScriptObject;

/**
 * <%= getDescription(' ') %>
 */
public class <%= className() %> extends <%= baseWidgetName() %> {
    /**
     * Default Constructor.
     */
    public <%= className() %>() {
       this("");
    }

    /**
     * Constructor used by UIBinder to create widgets with content.
     */
    public <%= className() %>(String html) {
        super(<%= elementClassName() %>.TAG, <%= elementClassName() %>.SRC, html);
<% if (hasEvents()) _.forEach(events, function(event){ %>
        getPolymerElement().addEventListener(
                <%= event.ns %>.element.event.<%= camelCase(event.name) %>Event.NAME,
                new <%= event.ns %>.element.event.<%= camelCase(event.name) %>Event.Listener() {
            @Override
            protected void handleEvent(<%= event.ns %>.element.event.<%= camelCase(event.name) %>Event event) {
                fireEvent(new <%= camelCase(event.name) %>Event(event));
            }
        });
<% }); %>
    }

    /**
     * Gets a handle to the Polymer object's underlying DOM element.
     */
    public <%= elementClassName() %> getPolymerElement() {
        return (<%= elementClassName() %>) getElement();
    }

<% if (hasProperties()) _.forEach(properties, function(item){ %>
  <% if (item.type != 'Function') { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public <%= computeType(item.type) %> <%= computeGetterWithPrefix(item) %>(){
        return getPolymerElement().<%= computeGetterWithPrefix(item) %>();
    }
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @property <%= item.name %>
     * @type <%= item.type %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public void <%= computeSetterWithPrefix(item) %>(<%= computeType(item.type) %> value) {
        getPolymerElement().<%= computeSetterWithPrefix(item) %>(value);
    }
   <% if (item.published && computeType(item.type) != 'String') { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @attribute <%= hyphenize(item.name) %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public void <%= computeSetterWithPrefix(item) %>(String value) {
        getPolymerElement().setAttribute("<%= hyphenize(item.name) %>", value);
    }
   <% } %>    
  <% } else { %>
    /**
     * <%= getDescription('     ', item) %>
     *
     * JavaScript Info:
     * @method <%= item.name %><% if (!!item.params) _.forEach(item.params, function(param) { %>
     * @param {<%= param.type %>} <%= param.name %> <%= param.description %> <% }); %>
     * <%= item.isBehavior ? ('@behavior ' + item.behavior ) : ''%>
     */
    public void <%= item.name %>(<%= typedParamsString(item) %>) {
        getPolymerElement().<%= item.name %>(<%= paramsString(item) %>);
    }
  <% } %>
<% }); %>
<% if (hasEvents()) _.forEach(events, function(event){ %>
    /**
     * <%= getDescription('     ', event) %>
     *
     * JavaScript Info:
     * @event <%= event.name %>
     */
    public HandlerRegistration add<%= camelCase(event.name) %>Handler(<%= camelCase(event.name) %>EventHandler handler) {
        return addHandler(handler, <%= camelCase(event.name) %>Event.TYPE);
    }
<% }); %>
}
