/**
 * Code generated with gwt-polymer an Apache 2.0 Licensed library
 * developed at Vaadin Labs.
 */
package com.vaadin.components.gwt.polymer.client.element;

import com.vaadin.components.gwt.polymer.client.webapi.*;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.core.client.JsArray;
import com.google.gwt.core.client.js.JsProperty;
import com.google.gwt.core.client.js.JsType;

/**
 * AUTO-GENERATED CODE, DO NOT EDIT
 */
@JsType
public interface <%= className() %>Element extends <%= baseClassName() %> {

    public static final String TAG = "<%= name %>";

<% if (hasAttributes()) _.forEach(attributes, function(attribute){ %>
    /**
     * <%= attribute.description && attribute.description.trim().split('\n').join('\n     * ') || '' %>
     *
     * @attribute <%= attribute.name %>
     * @type <%= attribute.type %>
     */
    @JsProperty <%= computeType(attribute.type) %> <%= computeGetterWithPrefix(attribute) %>();
    @JsProperty void <%= computeSetterWithPrefix(attribute) %>(<%= computeType(attribute.type) %> value);
<% }); %>
<% if (hasProperties()) _.forEach(properties, function(property){ %>
    /**
     * <%= property.description && property.description.trim().split('\n').join('\n     * ') || '' %>
     *
     * @property <%= property.name %>
     * @type <%= property.type %>
     */
    @JsProperty <%= computeType(property.type) %> <%= computeGetterWithPrefix(property) %>();
    @JsProperty void <%= computeSetterWithPrefix(property) %>(<%= computeType(property.type) %> value);
<% }); %>
<% if (hasMethods()) _.forEach(methods, function(method){ %>
    /**
     * <%= method.description && method.description.trim().split('\n').join('\n     * ') || ''  %>
     *
     * @method <%= method.name %><% if (!!method.params) _.forEach(method.params, function(param) { %>
     * @param {<%= param.type %>} <%= param.name %> <%= param.description %> <% }); %>
     */
    void <%= method.name %>(<%= typedParamsString(method) %>);
<% }); %>
}
